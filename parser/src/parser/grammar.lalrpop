use miden_diagnostics::{DiagnosticsHandler, Severity, SourceSpan};

use crate::parser::ParseError;
use crate::lexer::Token;
use crate::ast::*;

grammar(diagnostics: &DiagnosticsHandler);

// AST NODE
// ================================================================================================

pub Source: Source = {
    SourceSection* => Source(<>)
}

SourceSection: SourceSection = {
    AirDef => SourceSection::AirDef(<>),
    Constant => SourceSection::Constant(<>),
    Trace => SourceSection::Trace(<>),
    PublicInputs => SourceSection::PublicInputs(<>),
    PeriodicColumns => SourceSection::PeriodicColumns(<>),
    RandomValues => SourceSection::RandomValues(<>),
    EvaluatorFunction => SourceSection::EvaluatorFunction(<>),
    BoundaryConstraints => SourceSection::BoundaryConstraints(<>),
    IntegrityConstraints => SourceSection::IntegrityConstraints(<>),
}

// AIR DEF
// ================================================================================================

AirDef: Identifier = {
    "def" <f: Identifier> => f
}

// TRACE COLUMNS
// ================================================================================================

Trace: Vec<Vec<TraceBinding>> = {
    <l:@L> "trace_columns" ":" <main_cols: MainTraceBindings?> <aux_cols: AuxTraceBindings?> <r:@R> =>?
        match (main_cols, aux_cols) {
            (Some(main_cols), Some(aux_cols)) => Ok(vec![main_cols, aux_cols]),
            (Some(main_cols), None) => Ok(vec![main_cols]),
            (None, Some(_aux_cols)) => {
                diagnostics.diagnostic(Severity::Error)
                    .with_message("declaration of main trace columns is required")
                    .with_primary_label(span!(l, r), "missing 'main' declaration in this section")
                    .emit();
                Err(ParseError::Failed.into())
            }
            (None, None) => {
                diagnostics.diagnostic(Severity::Error)
                    .with_message("trace_columns section cannot be empty")
                    .with_primary_label(span!(l, r), "missing 'main' declaration in this section")
                    .emit();
                Err(ParseError::Failed.into())
            }
        }
}

MainTraceBindings: Vec<TraceBinding> = {
    "main" ":" <main_cols: Vector<TraceBinding>> => 
        build_segment_bindings(0, Identifier("$main".to_string()), main_cols),
}

AuxTraceBindings: Vec<TraceBinding> = {
    "aux" ":" <aux_cols: Vector<TraceBinding>> => 
        build_segment_bindings(1, Identifier("$aux".to_string()), aux_cols),
}

TraceBinding: (Identifier, u64) = {
    <name: Identifier> => (name, 1),
    <name: Identifier> <size: Size> => (name, size)
}

// CONSTANTS
// ================================================================================================

Constant: ConstantBinding = {
    "const" <name: ConstName> "=" <scalar_value: Num_u64> => 
        ConstantBinding::new(name, ConstantValueExpr::Scalar(scalar_value)),
    "const" <name: ConstName> "=" <vector_value: Vector<Num_u64>> =>
        ConstantBinding::new(name, ConstantValueExpr::Vector(vector_value)),
    "const" <name: ConstName> "=" <matrix_value: Matrix<Num_u64>> =>
        ConstantBinding::new(name, ConstantValueExpr::Matrix(matrix_value)),
}

ConstName: Identifier = {
    <l:@L> <name: Identifier> <r:@R> =>? if name.0.chars().all(|v| v.is_uppercase()) {
        Ok(Identifier(name.to_string()))
    } else {
        diagnostics.diagnostic(Severity::Error)
            .with_message("constant identifiers must be uppercase, e.g. FOO")
            .with_primary_label(span!(l, r), "invalid name appears here")
            .emit();
        Err(ParseError::Failed.into())
    }
}

// PUBLIC INPUTS
// ================================================================================================

// At least one public input is required.
PublicInputs: Vec<PublicInput> = {
    "public_inputs" ":" <pub_inputs: PublicInput+> => pub_inputs
}

PublicInput: PublicInput = {
    <name: Identifier> ":" <size: Size> => PublicInput::new(name, size),
}

// PERIODIC COLUMNS
// ================================================================================================

// Periodic columns are not required, and there is no limit to the number that can be provided.
PeriodicColumns: Vec<PeriodicColumn> = {
    "periodic_columns" ":" <periodic_columns: PeriodicColumn*> => periodic_columns
}

PeriodicColumn: PeriodicColumn = {
    <name: Identifier> ":" <values: Vector<Num_u64>> =>
        PeriodicColumn::new(name, values),
}

// RANDOM VALUES
// ================================================================================================

RandomValues: RandomValues = {
    "random_values" ":" <rand_values: RandValuesDecl> <l:@L> <extra: RandValuesDecl*> <r:@R> =>? {
        if !extra.is_empty() {
            diagnostics.diagnostic(Severity::Warning)
                .with_message("only one declaration may appear in random_values")
                .with_primary_label(span!(l, r), "these declarations will be ignored")
                .emit();
        }
        Ok(rand_values)
    }
}

RandValuesDecl: RandomValues = {
    <name: DeclIdentifier> ":" <size: Size> => 
        RandomValues::new(size, vec![RandBinding::new(name, size)]),
    <l:@L> <ignored: DeclIdentifier> ":" "[" "]" <r:@R> =>? {
        diagnostics.diagnostic(Severity::Error)
            .with_message("random values cannot be empty")
            .with_primary_label(span!(l, r), "invalid declaration occurs here")
            .emit();
        Err(ParseError::Failed.into())
    },
    <name: DeclIdentifier> ":" <rand_vec: Vector<RandElem>> => {
        let num_values = rand_vec.iter().map(|v| v.size()).sum();
        let mut rand_values = vec![RandBinding::new(name, num_values)];
        rand_values.extend(rand_vec);
        RandomValues::new(num_values, rand_values)
    },
}

RandElem: RandBinding = {
    <name: Identifier> => RandBinding::new(name, 1),
    <name: Identifier> <size: Size> => RandBinding::new(name, size)
}

// EVALUATOR FUNCTIONS
// ================================================================================================

EvaluatorFunction: EvaluatorFunction = {
    "ev" <evaluator_fn_name: Identifier> "(" <trace: EvaluatorBindings> ")" ":"
        <integrity_stmts: IntegrityStmts> => 
            EvaluatorFunction::new(
                evaluator_fn_name,
                trace,
                integrity_stmts),
}

EvaluatorBindings: Vec<Vec<TraceBinding>> = {
    <l:@L> <trace: CommaElems<EvaluatorSegmentBindings>> <r:@R> =>? {
        let mut bindings = build_trace_bindings(trace);

        // the last segment of trace columns cannot be empty.
        if let Some((span, last_segment)) = bindings.last() {
            if last_segment.is_empty() {
                diagnostics.diagnostic(Severity::Error)
                  .with_message("invalid evaluator function definition")
                  .with_primary_label(*span, "the last trace segment cannot be empty")
                  .emit();
                return Err(ParseError::Failed.into());
            }
        }
        Ok(bindings.drain(..).map(|(_, seg)| seg).collect())
    }
}

EvaluatorSegmentBindings: (SourceSpan, Vec<(Identifier, u64)>) = {
    <l:@L> <elems: Vector<TraceBinding>> <r:@R> => (span!(l, r), elems),
    <l:@L> "[" "]" <r:@R> => (span!(l, r), vec![]),
}

// BOUNDARY STATEMENTS
// ================================================================================================

BoundaryConstraints: Vec<BoundaryStmt> = {
    <l:@L> "boundary_constraints" ":" <boundary_stmts: BoundaryStmt+> <r:@R> =>? {
        // check if at least one boundary constraint is defined
        let boundary_constraints_exist = boundary_stmts.iter().any(|stmt| matches!(stmt, BoundaryStmt::Constraint(_)));
        if !boundary_constraints_exist {
            diagnostics.diagnostic(Severity::Error)
                .with_message("at least one boundary constraint must be declared")
                .with_primary_label(span!(l, r), "missing constraint declaration in this section")
                .emit();
            return Err(ParseError::Failed.into());
        }
        Ok(boundary_stmts)
    }
}

BoundaryStmt: BoundaryStmt = {
    "let" <name: Identifier> "=" <boundary_variable_type: BoundaryVariableType> =>
        BoundaryStmt::VariableBinding(VariableBinding::new(name, boundary_variable_type)),
    "enf" <boundary_constraint: BoundaryConstraintExpr> =>
        BoundaryStmt::Constraint(boundary_constraint),
}

BoundaryConstraintExpr: BoundaryConstraint = {
    <column: SymbolAccess> "." <boundary: Boundary> "=" <value: BoundaryExpr>
        <comprehension: ConstraintComprehension<BoundaryExpr>?> =>
            BoundaryConstraint::new(column, boundary, value, comprehension),
}

BoundaryVariableType: VariableValueExpr = {
    <scalar_value: BoundaryExpr> => 
        VariableValueExpr::Scalar(scalar_value),
    <vector_value: Vector<BoundaryExpr>> => 
        VariableValueExpr::Vector(vector_value),
    <matrix_value: Matrix<BoundaryExpr>> =>
        VariableValueExpr::Matrix(matrix_value),
    "[" <list_comprehension: ListComprehension<BoundaryExpr>> "]" =>
        VariableValueExpr::ListComprehension(list_comprehension),
}

Boundary: Boundary = {
    "first" => Boundary::First,
    "last" => Boundary::Last
}

// --- BOUNDARY CONSTRAINT EXPRESSIONS WITH PRECEDENCE (LOWEST TO HIGHEST) ----------------------

BoundaryExpr: Expression = {
    <lexpr: BoundaryExpr> "+" <rexpr: BoundaryFactor> =>
        Expression::Add(Box::new(lexpr), Box::new(rexpr)),
    <lexpr: BoundaryExpr> "-" <rexpr: BoundaryFactor> =>
        Expression::Sub(Box::new(lexpr), Box::new(rexpr)),
    BoundaryFactor
}

BoundaryFactor: Expression = {
    <lexpr: BoundaryFactor> "*" <rexpr: BoundaryExponent> =>
        Expression::Mul(Box::new(lexpr), Box::new(rexpr)),
    BoundaryExponent
}

BoundaryExponent: Expression = {
    <lexpr: BoundaryExponent> "^" <rexpr: BoundaryAtom> =>
        Expression::Exp(Box::new(lexpr), Box::new(rexpr)),
    BoundaryAtom
}

BoundaryAtom: Expression = {
    "(" <BoundaryExpr> ")",
    <n: Num_u64> => Expression::Const(n),
    <symbol_access: SymbolAccess> => Expression::SymbolAccess(symbol_access),
    <list_folding_type: ListFolding<BoundaryExpr>> => Expression::ListFolding(list_folding_type),
}

// INTEGRITY CONSTRAINTS
// ================================================================================================

IntegrityConstraints: Vec<IntegrityStmt> = {
    "integrity_constraints" ":" <integrity_stmts: IntegrityStmts> => integrity_stmts
}

IntegrityStmts: Vec<IntegrityStmt> = {
    <l:@L> <integrity_stmts_groups: IntegrityStmtGroup+> <r:@R> =>? {
        let integrity_stmts: Vec<IntegrityStmt> = integrity_stmts_groups.into_iter().flatten().collect();
        // check if at least one integrity constraint is defined
        let integrity_constraints_exist = integrity_stmts.iter().any(|stmt| match stmt {
            IntegrityStmt::Constraint(_) => true,
            _ => false,
        });
        if !integrity_constraints_exist {
            diagnostics.diagnostic(Severity::Error)
                .with_message("at least one integrity constraint must be declared")
                .with_primary_label(span!(l, r), "missing constraint declaration in this section")
                .emit();
            return Err(ParseError::Failed.into());
        }
        Ok(integrity_stmts)
    },
    
}

IntegrityStmtGroup: Vec<IntegrityStmt> = {
    "let" <name: Identifier> "=" <integrity_variable_type: IntegrityVariableType> =>
        vec![IntegrityStmt::VariableBinding(VariableBinding::new(name, integrity_variable_type))],
    "enf" <integrity_constraint: IntegrityConstraintExpr> => vec![integrity_constraint],
    "match" "enf" ":" <integrity_stmts: IntegrityConstraintExpr+> => integrity_stmts,
}

IntegrityConstraintExpr: IntegrityStmt = {
    <constraint: IntegrityConstraintExprValue>
        <comprehension: ConstraintComprehension<IntegrityExpr>?>
        <selectors: WithSelectors?> =>
            IntegrityStmt::Constraint(IntegrityConstraint::new(constraint, comprehension, selectors)),
}

IntegrityConstraintExprValue: ConstraintExpr = {
    <lhs: IntegrityExpr> "=" <rhs: IntegrityExpr> =>
        ConstraintExpr::Inline(InlineConstraintExpr::new(lhs, rhs)),
    <evaluator_fn_call: EvaluatorFunctionCall> => ConstraintExpr::Evaluator(evaluator_fn_call)
}

WithSelectors: Expression = {
    "when" <selectors: IntegrityExpr> => selectors,
}

IntegrityVariableType: VariableValueExpr = {
    <scalar_value: IntegrityExpr> =>
        VariableValueExpr::Scalar(scalar_value),
    <vector_value: Vector<IntegrityExpr>> =>
        VariableValueExpr::Vector(vector_value),
    <matrix_value: Matrix<IntegrityExpr>> =>
        VariableValueExpr::Matrix(matrix_value),
    "[" <list_comprehension: ListComprehension<IntegrityExpr>> "]" =>
        VariableValueExpr::ListComprehension(list_comprehension),
}

EvaluatorFunctionCall: EvaluatorFunctionCall = {
    <ident: Identifier> "(" <args: CommaElems<EvaluatorArg>> ")" =>? {
        Ok(EvaluatorFunctionCall::new(ident, args))
    }
}

EvaluatorArg: Vec<SymbolAccess> = {
    <elems: Vector<SymbolAccess>> => elems,
    "[" "]" => Vec::new()
}

// --- INTEGRITY CONSTRAINT EXPRESSIONS WITH PRECEDENCE (LOWEST TO HIGHEST) ----------------------

IntegrityExpr: Expression = {
    <lexpr: IntegrityExpr> "&" <rexpr: IntegritySum> =>
        Expression::Mul(Box::new(lexpr), Box::new(rexpr)),
    <lexpr: IntegrityExpr> "|" <rexpr: IntegritySum> =>
        Expression::Sub(
            Box::new(Expression::Add(
                Box::new(lexpr.clone()), Box::new(rexpr.clone()))
            ),
            Box::new(Expression::Mul(
                Box::new(lexpr), Box::new(rexpr))
            )
        ),
    IntegritySum
}

IntegritySum: Expression = {
    <lexpr: IntegritySum> "+" <rexpr: IntegrityFactor> =>
        Expression::Add(Box::new(lexpr), Box::new(rexpr)),
    <lexpr: IntegritySum> "-" <rexpr: IntegrityFactor> =>
        Expression::Sub(Box::new(lexpr), Box::new(rexpr)),
    IntegrityFactor
}

IntegrityFactor: Expression = {
    <lexpr: IntegrityFactor> "*" <rexpr: IntegrityExponent> =>
        Expression::Mul(Box::new(lexpr), Box::new(rexpr)),
    IntegrityExponent
}

IntegrityExponent: Expression = {
    <lexpr: IntegrityExponent> "^" <rexpr: IntegrityAtom> =>
        Expression::Exp(Box::new(lexpr), Box::new(rexpr)),
    IntegrityAtom
}

IntegrityAtom: Expression = {
    "(" <IntegrityExpr> ")",
    <n: Num_u64> => Expression::Const(n),
    "!" <expr: IntegrityAtom> =>
        Expression::Sub(Box::new(Expression::Const(1)), Box::new(expr)),
    <symbol_access: SymbolAccess> => Expression::SymbolAccess(symbol_access),
    <list_folding_type: ListFolding<IntegrityExpr>> =>
        Expression::ListFolding(list_folding_type),
}

// ATOMS
// ================================================================================================

CommaElems<T>: Vec<T> = {
    <e:T> <v:("," <T>)*> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
}

Tuple<T>: Vec<T> = {
    "(" <e:T> <v:("," <T>)+> ")" => {
        let mut v = v;
        v.insert(0, e);
        v
    }
}

Vector<T>: Vec<T> = {
    "[" <elems: CommaElems<T>> "]" => elems
}

Matrix<T>: Vec<Vec<T>> = {
    <elems: Vector<Vector<T>>> => elems
}

Size: u64 = {
    "[" <size: Num_u64> "]" => size
}

Index: usize = {
    "[" <idx: Num_u64> "]" => idx as usize
}

SymbolAccess: SymbolAccess = {
    <symbol_access: SymbolAccessBase> => SymbolAccess::new(symbol_access.0, symbol_access.1, 0),
    <symbol_access: SymbolAccessBase> "'" => SymbolAccess::new(symbol_access.0, symbol_access.1, 1)
}

SymbolAccessBase: (Identifier, AccessType) = {
    <ident: Identifier> => (ident, AccessType::Default),
    <ident: Identifier> "[" <range: Range> "]" => (ident, AccessType::Slice(range)),
    <ident: Identifier> <idx: Index> =>  (ident, AccessType::Vector(idx)),
    <ident: Identifier> <row: Index> <col: Index> => (ident, AccessType::Matrix(row, col)),
    // accessing an identifier used in a section declaration, like the full random values array or
    // a named trace segment, e.g. $main, $aux, $rand
    <ident: DeclIdentRef> => (ident, AccessType::Default),
    <ident: DeclIdentRef> <idx: Index> => (ident, AccessType::Vector(idx))

}

ConstraintComprehension<T>: ComprehensionContext = {
    <l:@L> "for" <members: Members> "in" <iterables: Iterables> <r:@R> =>?
        if members.len() != iterables.len() {
            diagnostics.diagnostic(Severity::Error)
                .with_message("bindings and iterables lengths are mismatched")
                .with_primary_label(span!(l, r), "in this comprehension")
                .emit();
            Err(ParseError::Failed.into())
        } else {
            Ok(members.into_iter().zip(iterables).collect::<Vec<_>>())
        }
}

ListComprehension<T>: ListComprehension = {
    <l:@L> <expr: T> "for" <members: Members> "in" <iterables: Iterables> <r:@R> =>?
        if members.len() != iterables.len() {
            diagnostics.diagnostic(Severity::Error)
                .with_message("bindings and iterables lengths are mismatched")
                .with_primary_label(span!(l, r), "in this comprehension")
                .emit();
            Err(ParseError::Failed.into())
        } else {
            Ok(ListComprehension::new(expr, members.into_iter().zip(iterables).collect::<Vec<_>>()))
        }
}

ListFolding<T>: ListFolding = {
    "sum" "(" <list_folding_value_type: ListFoldingValueExpr<T>> ")" =>
        ListFolding::Sum(list_folding_value_type),
    "prod" "(" <list_folding_value_type: ListFoldingValueExpr<T>> ")" =>
        ListFolding::Prod(list_folding_value_type),
}

ListFoldingValueExpr<T>: ListFoldingValueExpr = {
    <name: Identifier> => ListFoldingValueExpr::Identifier(name),
    <vector: Vector<T>> => ListFoldingValueExpr::Vector(vector),
    "[" <list_comprehension: ListComprehension<T>> "]" =>
        ListFoldingValueExpr::ListComprehension(list_comprehension)
}

Members: Vec<Identifier> = {
    <member: Identifier> => vec![member],
    "(" <members: CommaElems<Identifier>> ")" => members
}

Iterables: Vec<Iterable> = {
    <iterable: Iterable> => vec![iterable],
    "(" <iterables: CommaElems<Iterable>> ")" => iterables
}

Iterable: Iterable = {
    <ident: Identifier> => Iterable::Identifier(ident),
    <range: Range> => Iterable::Range(range),
    <ident: Identifier> "[" <range: Range> "]" => Iterable::Slice(ident, range)
}

Range: Range = {
    <start: Num_u64> ".." <end: Num_u64> => Range::new(start as usize, end as usize)
}

DeclIdentRef: Identifier = {
    <ident: decl_ident_ref> => Identifier(ident)
}

DeclIdentifier: Identifier = {
    <ident: identifier> => Identifier(format!("${ident}"))
}

Identifier: Identifier = {
    <ident: identifier> => Identifier(ident.to_string())
}

Num_u64: u64 = {
    int,
}

// LEXER
// ================================================================================================

extern {
    type Error = ParseError;
    type Location = miden_diagnostics::SourceIndex;

    enum Token {
        identifier => Token::Ident(<String>),
        decl_ident_ref => Token::DeclIdentRef(<String>),
        int => Token::Num(<u64>),
        "def" => Token::Def,
        "let" => Token::Let,
        "for" => Token::For,
        "in" => Token::In,
        "sum" => Token::Sum,
        "prod" => Token::Prod,
        "const" => Token::Const,
        "trace_columns" => Token::TraceColumns,
        "main" => Token::Main,
        "aux" => Token::Aux,
        "public_inputs" => Token::PublicInputs,
        "periodic_columns" => Token::PeriodicColumns,
        "random_values" => Token::RandomValues,
        "boundary_constraints" => Token::BoundaryConstraints,
        "first" => Token::First,
        "last" => Token::Last,
        "integrity_constraints" => Token::IntegrityConstraints,
        "ev" => Token::Ev,
        "enf" => Token::Enf,
        "when" => Token::When,
        "match" => Token::Match,
        "'" => Token::Quote,
        "=" => Token::Equal,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "^" => Token::Caret,
        "&" => Token::Ampersand,
        "|" => Token::Bar,
        "!" => Token::Bang,
        ":" => Token::Colon,
        "," => Token::Comma,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "." => Token::Dot,
        ".." => Token::DotDot,
    }
}
