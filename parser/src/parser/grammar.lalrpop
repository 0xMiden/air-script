use crate::{
    ast::{
        boundary_constraints::{Boundary, BoundaryConstraint, BoundaryStmt}, 
        integrity_constraints::{IntegrityConstraint, IntegrityStmt},
        Constant, ConstantType, Expression, Identifier, Variable, VariableType,
        RandomValues, RandBinding, Source, SourceSection, Trace, TraceCols, PublicInput, 
        PeriodicColumn, IndexedTraceAccess, NamedTraceAccess, MatrixAccess, VectorAccess
    }, error::{Error, ParseError::{InvalidInt, InvalidTraceCols, InvalidRandomValues, 
    MissingMainTraceCols, InvalidConst, MissingBoundaryConstraint, MissingIntegrityConstraint}}, 
    lexer::Token
};
use std::str::FromStr;
use lalrpop_util::ParseError;

grammar;

// AST NODE
// ================================================================================================

pub Source: Source = {
    SourceSection* => Source(<>)
}

SourceSection: SourceSection = {
    AirDef => SourceSection::AirDef(<>),
    Constant => SourceSection::Constant(<>),
    Trace => SourceSection::Trace(<>),
    PublicInputs => SourceSection::PublicInputs(<>),
    PeriodicColumns => SourceSection::PeriodicColumns(<>),
    RandomValues => SourceSection::RandomValues(<>),
    BoundaryConstraints => SourceSection::BoundaryConstraints(<>),
    IntegrityConstraints => SourceSection::IntegrityConstraints(<>),
}

// AIR DEF
// ================================================================================================

AirDef: Identifier = {
    "def" <f: Identifier> => f
}

// TRACE COLUMNS
// ================================================================================================

Trace: Trace = {
    "trace_columns" ":" <main_cols: MainCols?> <aux_cols: AuxCols?> =>? match (main_cols, aux_cols)
    {
        (Some(main_cols), Some(aux_cols)) => Ok(Trace { main_cols, aux_cols }),
        (Some(main_cols), None) => Ok(Trace { main_cols, aux_cols: vec![] }),
        (None, Some(_aux_cols)) => Err(ParseError::User {
            error: Error::ParseError(
                MissingMainTraceCols("Declaration of main trace columns is required".to_string())
            )
        }),
        (None, None) => Err(ParseError::User {
            error: Error::ParseError(InvalidTraceCols("Trace Columns cannot be empty".to_string()))
        })
    } 
}

MainCols: Vec<TraceCols> = {
    "main" ":" "[" <main_cols: CommaElems<TraceCols>> "]" => main_cols,
}

AuxCols: Vec<TraceCols> = {
    "aux" ":" "[" <aux_cols: CommaElems<TraceCols>> "]" => aux_cols,
}

TraceCols: TraceCols = {
    <name: Identifier> => TraceCols::new(name, 1),
    <name: Identifier> <size: Size> => TraceCols::new(name, size)
}

// CONSTANTS
// ================================================================================================

Constant: Constant = {
    "const" <name: ConstName> "=" <scalar_value: Num_u64> => 
        Constant::new(name, ConstantType::Scalar(scalar_value)),
    "const" <name: ConstName> "=" "[" <vector_value: CommaElems<Num_u64>> "]" =>
        Constant::new(name, ConstantType::Vector(vector_value)),
    "const" <name: ConstName> "=" "[" <matrix_value: CommaElems<Vector<Num_u64>>> "]" =>
        Constant::new(name, ConstantType::Matrix(matrix_value)),
}

ConstName: Identifier = {
    <name: Identifier> =>? if name.0.chars().all(|v| v.is_uppercase()) {
        Ok(Identifier(name.to_string()))
    } else {
        Err(ParseError::User {
            error: Error::ParseError(InvalidConst(
                format!("The constant name should be uppercase: {}", <>).to_string()
            ))
        })
    }
}

// PUBLIC INPUTS
// ================================================================================================

// At least one public input is required.
PublicInputs: Vec<PublicInput> = {
    "public_inputs" ":" <pub_inputs: PublicInput+> => pub_inputs
}

PublicInput: PublicInput = {
    <name: Identifier> ":" <size: Size> => PublicInput::new(name, size),
}

// PERIODIC COLUMNS
// ================================================================================================

// Periodic columns are not required, and there is no limit to the number that can be provided.
PeriodicColumns: Vec<PeriodicColumn> = {
    "periodic_columns" ":" <periodic_columns: PeriodicColumn*> => periodic_columns
}

PeriodicColumn: PeriodicColumn = {
    <name: Identifier> ":" "[" <values: CommaElems<Num_u64>> "]" =>
        PeriodicColumn::new(name, values),
}

// RANDOM VALUES
// ================================================================================================

RandomValues: RandomValues = {
    "random_values" ":" <rand_values: ListElems<RandValuesDecl>> =>? match rand_values.len() {
        1 => Ok(rand_values[0].clone()),
        _ => Err(ParseError::User{
            error: Error::ParseError(
                InvalidRandomValues("No more than one set of random values can be declared".to_string())
            )
        })
    }
}

RandValuesDecl: RandomValues = {
    <name: Identifier> ":" <size: Size> => RandomValues::new(name, size, vec![]),
    <_name: Identifier> ":" "[" "]" =>? Err(
        ParseError::User{
            error: Error::ParseError(
                InvalidRandomValues(
                    "Random Values section cannot be empty".to_string()
                )
            )
        }
    ),
    <name: Identifier> ":" "[" <rand_vec: CommaElems<RandElem>> "]" => RandomValues::new(name, rand_vec.iter().map(|v| v.size()).sum(), rand_vec)

}

RandElem: RandBinding = {
    <name: Identifier> => RandBinding::new(name, 1),
    <name: Identifier> <size: Size> => RandBinding::new(name, size)
}

// BOUNDARY STATEMENTS
// ================================================================================================

BoundaryConstraints: Vec<BoundaryStmt> = {
    "boundary_constraints" ":" <boundary_stmts: BoundaryStmt+> =>? {
        // check if at least one boundary constraint is defined
        let boundary_constraints_exist = boundary_stmts.iter().any(|stmt| match stmt {
            BoundaryStmt::Constraint(_) => true,
            _ => false,
        });
        if !boundary_constraints_exist {
            return Err(ParseError::User {
                error: Error::ParseError(
                    MissingBoundaryConstraint(
                        "Declaration of at least one boundary constraint is required".to_string()
                    )
                )
            });
        }
        Ok(boundary_stmts)
    }
}

BoundaryStmt: BoundaryStmt = {
    "enf" <column: NamedTraceAccess> "." <boundary: Boundary> "=" <value: BoundaryExpr> =>
        BoundaryStmt::Constraint(BoundaryConstraint::new(column, boundary, value)),
    "let" <name: Identifier> "=" <boundary_variable_type: BoundaryVariableType> =>
        BoundaryStmt::Variable(Variable::new(name, boundary_variable_type)),
}

BoundaryVariableType: VariableType = {
    <scalar_value: BoundaryExpr> =>
        VariableType::Scalar(scalar_value),
    "[" <vector_value: CommaElems<BoundaryExpr>> "]" =>
        VariableType::Vector(vector_value),
    "[" <matrix_value: CommaElems<Vector<BoundaryExpr>>> "]" =>
        VariableType::Matrix(matrix_value),
}

Boundary: Boundary = {
    "first" => Boundary::First,
    "last" => Boundary::Last
}

// --- BOUNDARY CONSTRAINT EXPRESSIONS WITH PRECEDENCE (LOWEST TO HIGHEST) ----------------------

BoundaryExpr: Expression = {
    <lexpr: BoundaryExpr> "+" <rexpr: BoundaryFactor> =>
        Expression::Add(Box::new(lexpr), Box::new(rexpr)),
    <lexpr: BoundaryExpr> "-" <rexpr: BoundaryFactor> =>
        Expression::Sub(Box::new(lexpr), Box::new(rexpr)),
    BoundaryFactor
}

BoundaryFactor: Expression = {
    <lexpr: BoundaryFactor> "*" <rexpr: BoundaryAtom> =>
        Expression::Mul(Box::new(lexpr), Box::new(rexpr)),
    BoundaryAtom
}

BoundaryAtom: Expression = {
    "(" <BoundaryExpr> ")",
    <lexpr: BoundaryAtom> "^" <num: Num_u64> => Expression::Exp(Box::new(lexpr), num),
    "$rand" <idx: Index> => Expression::Rand(idx),
    <n: Num_u64> => Expression::Const(n),
    <ident: Identifier> => Expression::Elem(ident),
    <vector_access: VectorAccess> => Expression::VectorAccess(vector_access),
    <matrix_access: MatrixAccess> => Expression::MatrixAccess(matrix_access)
}

// INTEGRITY CONSTRAINTS
// ================================================================================================

IntegrityConstraints: Vec<IntegrityStmt> = {
    "integrity_constraints" ":" <integrity_stmts: IntegrityStmt+> =>? {
        // check if at least one integrity constraint is defined
        let integrity_constraints_exist = integrity_stmts.iter().any(|stmt| match stmt {
            IntegrityStmt::Constraint(_) => true,
            _ => false,
        });
        if !integrity_constraints_exist {
            return Err(ParseError::User {
                error: Error::ParseError(
                    MissingIntegrityConstraint(
                        "Declaration of at least one integrity constraint is required".to_string()
                    )
                )
            });
        }
        Ok(integrity_stmts)
    }
}

IntegrityStmt: IntegrityStmt = {
    "enf" <lhs: IntegrityExpr> "=" <rhs: IntegrityExpr> =>
        IntegrityStmt::Constraint(IntegrityConstraint::new(lhs, rhs)),
    "let" <name: Identifier> "=" <integrity_variable_type: IntegrityVariableType> =>
        IntegrityStmt::Variable(Variable::new(name, integrity_variable_type)),
}

IntegrityVariableType: VariableType = {
    <scalar_value: IntegrityExpr> =>
        VariableType::Scalar(scalar_value),
    "[" <vector_value: CommaElems<IntegrityExpr>> "]" =>
        VariableType::Vector(vector_value),
    "[" <matrix_value: CommaElems<Vector<IntegrityExpr>>> "]" =>
        VariableType::Matrix(matrix_value),
}

// --- INTEGRITY CONSTRAINT EXPRESSIONS WITH PRECEDENCE (LOWEST TO HIGHEST) ----------------------

IntegrityExpr: Expression = {
    <lexpr: IntegrityExpr> "+" <rexpr: IntegrityFactor> =>
        Expression::Add(Box::new(lexpr), Box::new(rexpr)),
    <lexpr: IntegrityExpr> "-" <rexpr: IntegrityFactor> =>
        Expression::Sub(Box::new(lexpr), Box::new(rexpr)),
    IntegrityFactor
}

IntegrityFactor: Expression = {
    <lexpr: IntegrityFactor> "*" <rexpr: IntegrityAtom> =>
        Expression::Mul(Box::new(lexpr), Box::new(rexpr)),
    IntegrityAtom
}

IntegrityAtom: Expression = {
    "(" <IntegrityExpr> ")",
    <lexpr: IntegrityAtom> "^" <num: Num_u64> => Expression::Exp(Box::new(lexpr), num),
    "$rand" <idx: Index> => Expression::Rand(idx),
    <col_access: IndexedTraceAccess> => Expression::IndexedTraceAccess(col_access),
    <n: Num_u64> => Expression::Const(n),
    <ident: Identifier> => Expression::Elem(ident),
    <vector_access: VectorAccess> => Expression::VectorAccess(vector_access),
    <matrix_access: MatrixAccess> => Expression::MatrixAccess(matrix_access),
    <trace_access: NamedTraceAccessWithOffset> => Expression::NamedTraceAccess(trace_access)
}

// ATOMS
// ================================================================================================

CommaElems<T>: Vec<T> = {
    <e:T> <v:("," <T>)*> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
}

ListElems<T>: Vec<T> = {
    <e:T> <v: T*> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
}

Vector<T>: Vec<T> = {
    "[" <e:T> <v:("," <T>)*> "]" => {
        let mut v = v;
        v.insert(0, e);
        v
    }
}

Size: u64 = {
    "[" <size: Num_u64> "]" => size
}

Index: usize = {
    "[" <idx: Num_u64> "]" => idx as usize
}

VectorAccess: VectorAccess = {
    <ident: Identifier> <idx: Index> => VectorAccess::new(ident, idx)
}

MatrixAccess: MatrixAccess = {
    <ident: Identifier> <row: Index> <col: Index> =>
        MatrixAccess::new(ident, row, col)
}

NamedTraceAccess: NamedTraceAccess = {
    <ident: Identifier> => NamedTraceAccess::new(ident, 0, 0),
    <ident: Identifier> <idx: Index> => NamedTraceAccess::new(ident, idx, 0)
}

NamedTraceAccessWithOffset: NamedTraceAccess = {
    <ident: Identifier> "'" => NamedTraceAccess::new(ident, 0, 1),
    <ident: Identifier> <idx: Index> "'" => NamedTraceAccess::new(ident, idx, 1)
}

IndexedTraceAccess: IndexedTraceAccess = {
    "$main" <idx: Index> => IndexedTraceAccess::new(0, idx, 0),
    "$main" <idx: Index> "'" => IndexedTraceAccess::new(0, idx, 1), 
    "$aux" <idx: Index> => IndexedTraceAccess::new(1, idx, 0),
    "$aux" <idx: Index> "'" => IndexedTraceAccess::new(1, idx, 1),
}

Identifier: Identifier = {
    <n:identifier> => Identifier(n.to_string())
}

Num_u64: u64 = {
    r"[0-9]+" =>? u64::from_str(&<>)
        .map_err(|_| ParseError::User {
            error: Error::ParseError(InvalidInt(format!("Int too big : {}", <>).to_string()))
        })
}

// LEXER
// ================================================================================================

extern {
    type Error = Error;
    type Location = usize;

    enum Token {
        identifier => Token::Ident(<String>),
        r"[0-9]+" => Token::Num(<String>),
        "def" => Token::Def,
        "let" => Token::Let,
        "const" => Token::Const,
        "trace_columns" => Token::TraceColumns,
        "main" => Token::MainDecl,
        "aux" => Token::AuxDecl,
        "public_inputs" => Token::PublicInputs,
        "periodic_columns" => Token::PeriodicColumns,
        "random_values" => Token::RandomValues,
        "boundary_constraints" => Token::BoundaryConstraints,
        "first" => Token::First,
        "last" => Token::Last,
        "integrity_constraints" => Token::IntegrityConstraints,
        "$rand" => Token::Rand,
        "$main" => Token::MainAccess,
        "$aux" => Token::AuxAccess,
        "enf" => Token::Enf,
        "'" => Token::Next,
        "=" => Token::Equal,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Mul,
        "^" => Token::Exp,
        ":" => Token::Colon,
        "," => Token::Comma,
        "[" => Token::Lsqb,
        "]" => Token::Rsqb,
        "(" => Token::Lparen,
        ")" => Token::Rparen,
        "." => Token::Dot,
    }
}
