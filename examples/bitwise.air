def BitwiseAir

trace_columns:
    main: [s, a0, b0, a[4], b[4], zp, z]

periodic_columns:
    k0: [1, 0, 0, 0, 0, 0, 0, 0]
    k1: [1, 1, 1, 1, 1, 1, 1, 0]

transition_constraints:
    # Enforce that selector must be binary
    enf s^2 - s = 0

    # Enforce that selector should stay the same throughout
    enf k1 * (s' - s) = 0

    # Enforce that input is decomposed into valid bits
    for i in 0..4:
        enf a[i]^2 - a[i] = 0
        enf b[i]^2 - b[i] = 0

    # Enforce that the values in the columns a0 and b0 are exactly equal to the aggregation of binary
    # values contained in the individual bit columns.
    enf k0 * (a0 - sum([2^i * a[i] for i in range(0, 4)])) = 0
    enf k0 * (b0 - sum([2^i * b[i] for i in range(0, 4)])) = 0

    # Enforce that for all rows in an 8-row cycle except for the last one, the values in a0 and b0
    # columns are increased by the values contained in the individual bit columns a and b.
    enf k1 * (a0' - (a0 * 16 + sum([2^i * a[i] for i in range(0, 4)]))) = 0
    enf k1 * (b0' - (b0 * 16 + sum([2^i * b[i] for i in range(0, 4)]))) = 0

    # Enforce that in the first row, the aggregated output value of the previous row should be 0.
    enf k0 * zp = 0

    # Enforce that for each row except the last, the aggregated output value must equal the previous
    # aggregated output value in the next row.
    enf k1 * (z - zp') = 0

    # Enforce that for all rows the value in the z column is computed by multiplying the previous
    # output value (from the zp column in the current row) by 16 and then adding it to the bitwise
    # operation applied to the row's set of bits of a and b. The entire constraint must also be
    # multiplied by the operation selector flag to ensure it is only applied for the appropriate
    # operation.
    let u32and_constraint = (1 - s) * (z - (zp * 16 + sum([2^i * a[i] * b[i] for i in range(0, 4)])))
    let u32xor_constraint = s * (z - (zp * 16 + sum([a[i] + b[i] - 2^i * a[i] * b[i] for i in range(0, 4)])))
    
    enf u32and_constraint + u32xor_constraint = 0