mod ChipletsConstraintsAir

use bitwise::bitwise_chiplet
use hash::hash_chiplet
use memory::memory_chiplet

### Helper evaluators #############################################################################

# Enforces that the provided columns must be binary.
ev is_binary(main: [a]):
    enf a^2 = a

# Enforces that constraints are only ever selected for one chiplet at a time.
ev chiplet_constraints(main: [s[3], chiplet_columns[15]]):
    match enf: 
        hash_chiplet([s[1], s[2], chip_columns]) when !s[0]
        bitwise_chiplet([s[2], chip_columns]) when s[0] & !s[1]
        memory_chiplet([chip_columns]) when s[0] & s[1] & !s[2]'


# Enforces that the chiplet selector columns are set correctly.
enf chiplet_selector_constraints(main: [s[3]]):
    # Enforce that selectors are binary.
    enf is_binary([s[0]])
    enf is_binary([s[1]]) when s[0]
    enf is_binary([s[2]]) when s[0] & s[1]

    # Enforce that the chiplets are stacked correctly by restricting selector values so they can 
    # only change from 0 to 1.
    enf s[0]' = s[0] when s[0]
    enf s[1]' = s[1] when s[0] & s[1]
    enf s[2]' = s[2] when s[0] & s[1] & s[2]


### Chiplets Constraints ##########################################################################

ev chiplets_constraints(main: [s[3], chiplet_columns[15]]):
    enf chiplet_selector_constraints([s])

    enf chiplet_constraints([s, chiplet_columns])
