proc.cache_z_exp
    padw mem_loadw.4294903304 drop drop
    # => [z_1, z_0, ...]
    # Exponentiate z trace_len times
    mem_load.4294903307 neg
    # => [count, z_1, z_0, ...] where count = -log2(trace_len)
    dup.0 neq.0
    while.true
        movdn.2 dup.1 dup.1 ext2mul
        # => [(z_1, z_0)^n, i, ...]
        movup.2 add.1 dup.0 neq.0
        # => [b, i+1, (z_1, z_0)^n, ...]
    end # END while
    push.0 mem_storew.500000100 # z^trace_len
    # => [0, 0, (z_1, z_0)^trace_len, ...]
    dropw # Clean stack
end # END PROC cache_z_exp

proc.get_exemptions_points
    mem_load.4294799999
    # => [g, ...]
    push.1 swap div
    # => [g^{-1}, ...]
    dup.0 dup.0 mul
    # => [g^{-2}, g^{-1}, ...]
end # END PROC get_exemptions_points

proc.compute_integrity_constraint_divisor
    padw mem_loadw.500000100 drop drop # load z^trace_len
    # Comments below use zt = `z^trace_len`
    # => [zt_1, zt_0, ...]
    push.1 push.0 ext2sub
    # => [zt_1-1, zt_0-1, ...]
    padw mem_loadw.4294903304 drop drop # load z
    # => [z_1, z_0, zt_1-1, zt_0-1, ...]
    exec.get_exemptions_points
    # => [g^{trace_len-2}, g^{trace_len-1}, z_1, z_0, zt_1-1, zt_0-1, ...]
    dup.3 dup.3 movup.3 push.0 ext2sub
    # => [e_1, e_0, g^{trace_len-1}, z_1, z_0, zt_1-1, zt_0-1, ...]
    movup.4 movup.4 movup.4 push.0 ext2sub
    # => [e_3, e_2, e_1, e_0, zt_1-1, zt_0-1, ...]
    ext2mul
    # => [denominator_1, denominator_0, zt_1-1, zt_0-1, ...]
    ext2div
    # => [divisor_1, divisor_0, ...]
end # END PROC compute_integrity_constraint_divisor

proc.compute_evaluate_integrity_constraints
    # integrity constraint 0 for main
    padw mem_loadw.4294900000 drop drop padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop push.1 push.0 ext2add ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900200 movdn.3 movdn.3 drop drop ext2mul
end # END PROC compute_evaluate_integrity_constraints

proc.compute_evaluate_boundary_constraints
    # boundary constraint 0 for main
    padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop push.0 push.0 ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900200 drop drop ext2mul
end # END PROC compute_evaluate_boundary_constraints

proc.evaluate_integrity_constraints
    exec.compute_evaluate_integrity_constraints
    # Numerator of the transition constraint polynomial
    ext2add
    # Divisor of the transition constraint polynomial
    exec.compute_integrity_constraint_divisor
    ext2div # divide the numerator by the divisor
end # END PROC evaluate_integrity_constraints

proc.evaluate_boundary_constraints
    exec.compute_evaluate_boundary_constraints
    # Accumulate the numerator of the constraint polynomial
    ext2add
end # END PROC evaluate_boundary_constraints

