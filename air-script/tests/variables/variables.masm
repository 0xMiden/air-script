proc.cache_z_exp
    # Load trace length
    mem_load.3294967296
    # => [trace_len, ...]
    # Push initial num_of_cycles
    push.1
    # => [num_of_cycles, trace_len, ...]
    # Load Z
    padw mem_loadw.4294967291 drop drop
    # => [z_1, z_0, num_of_cycles, trace_len, ...]
    # Compute exponentiations based on the number of cycles for a period of 8
    dup.3 div.8
    # => [num_of_cycles', z_1, z_0, num_of_cycles, trace_len, ...]
    # Update next num_of_cycles and compute number of iterations
    movup.3 dup.1 movdn.4 div
    # => [i, z_1, z_0, num_of_cycles', trace_len, ...]
    # Exponentiate the existing `z**num_of_cycles` an additional `i` times
    dup.0 neq.1
    while.true
        movdn.2 dup.1 dup.1 ext2mul
        # => [z_1^2, z_0^2, i, num_of_cycles', trace_len, ...]
        movup.2 div.2 dup.0 neq.1
        # => [b, i+1, z_1^2, z_0^2, num_of_cycles', trace_len, ...]
    end # END while
    drop push.0 push.0
    mem_storew.500000100 # Save the exponentiation of z for column 0
    # => [0, 0, z_1^2, z_0^2, num_of_cycles', trace_len, ...]
    drop drop
    # => [z_1^2, z_0^2, num_of_cycles', trace_len, ...]
    # Clean stack
    dropw
end # END PROC cache_z_exp

proc.cache_periodic_polys
    exec.cache_z_exp
    # periodic column 0
    padw mem_loadw.500000100 drop drop
    # => [z_exp_1, z_exp_0, ...]
    push.2305843008676823041 push.0
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.18446744069412487169 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.18446708885042495489 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.18446743931975630881 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.16140901060737761281 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.2097152 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.35184372088832 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.137438953440 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # Clean z_exp from the stack
    movup.3 movup.3 drop drop
    # => [a_1, a_0, ...]
    # Save the evaluation of the periodic polynomial at point z**exp, and clean stack
    push.0 push.0 mem_storew.500000000 dropw
end # END PROC cache_periodic_polys

proc.compute_evaluate_transitions
    # constraint 0 for main
    padw mem_loadw.4294965000 movdn.3 movdn.3 drop drop
    # push the accumulator to the stack
    push.1 movdn.2 push.0 movdn.2
    # => [b1, b0, r1, r0, ...]
    # square 1 times
    dup.1 dup.1 ext2mul
    # multiply
    dup.1 dup.1 movdn.5 movdn.5
    # => [b1, b0, r1, r0, b1, b0, ...] (4 cycles)
    ext2mul movdn.3 movdn.3
    # => [b1, b0, r1', r0', ...] (5 cycles)
    # clean stack
    drop drop
    # => [r1, r0, ...] (2 cycles)
    padw mem_loadw.4294965000 movdn.3 movdn.3 drop drop ext2sub
    # constraint 1 for main
    padw mem_loadw.500000000 drop drop padw mem_loadw.4294965000 drop drop padw mem_loadw.4294965000 movdn.3 movdn.3 drop drop ext2sub ext2mul push.0 push.0 ext2sub
    # constraint 2 for main
    push.1 push.0 padw mem_loadw.4294965000 movdn.3 movdn.3 drop drop ext2sub padw mem_loadw.4294965003 movdn.3 movdn.3 drop drop padw mem_loadw.4294965001 movdn.3 movdn.3 drop drop ext2sub padw mem_loadw.4294965002 movdn.3 movdn.3 drop drop ext2sub ext2mul push.2 push.0 push.3 push.0 ext2mul padw mem_loadw.4294965000 movdn.3 movdn.3 drop drop ext2sub ext2sub
    # constraint 3 for main
    padw mem_loadw.4294965000 movdn.3 movdn.3 drop drop padw mem_loadw.4294965003 movdn.3 movdn.3 drop drop padw mem_loadw.4294965001 movdn.3 movdn.3 drop drop padw mem_loadw.4294965002 movdn.3 movdn.3 drop drop ext2mul ext2sub ext2mul padw mem_loadw.4294965000 drop drop push.3 push.0 ext2sub push.4 push.0 push.2 push.0 ext2sub ext2sub ext2sub
    # constraint 0 for aux
    padw mem_loadw.4294965072 drop drop padw mem_loadw.4294965072 movdn.3 movdn.3 drop drop padw mem_loadw.4294965003 movdn.3 movdn.3 drop drop padw mem_loadw.4294965000 movdn.3 movdn.3 drop drop ext2add ext2mul ext2sub
end # END PROC compute_evaluate_transitions

proc.evaluate_transitions
    exec.cache_periodic_polys
    exec.compute_evaluate_transitions
    # Compute the numerator of the constraint polynomial
    push.0 push.0
    # Save the accumulator
    movdn.2 movdn.2
    # Accumulate constraint 4 into the numerator
    padw mem_loadw.4294966018 movdn.3 movdn.3 drop drop ext2mul ext2add # accumulate the contraint into the numerator
    # Save the accumulator
    movdn.2 movdn.2
    # Accumulate constraint 3 into the numerator
    padw mem_loadw.4294966017 drop drop ext2mul ext2add # accumulate the contraint into the numerator
    # Save the accumulator
    movdn.2 movdn.2
    # Accumulate constraint 2 into the numerator
    padw mem_loadw.4294966017 movdn.3 movdn.3 drop drop ext2mul ext2add # accumulate the contraint into the numerator
    # Save the accumulator
    movdn.2 movdn.2
    # Accumulate constraint 1 into the numerator
    padw mem_loadw.4294966016 drop drop ext2mul ext2add # accumulate the contraint into the numerator
    # Save the accumulator
    movdn.2 movdn.2
    # Accumulate constraint 0 into the numerator
    padw mem_loadw.4294966016 movdn.3 movdn.3 drop drop ext2mul ext2add # accumulate the contraint into the numerator
end # END PROC evaluate_transitions

proc.evaluate_boundary
end # END PROC evaluate_boundary

