proc.cache_z_exp
    padw mem_loadw.4294903304 drop drop
    # => [z_1, z_0, ...]
    # Find number exponentiations required to get for a period of length 8
    mem_load.4294903307 neg add.3
    # => [count, z_1, z_0, ...] where count = -log2(trace_len) + 3
    # Exponentiate z
    dup.0 neq.0
    while.true
        movdn.2 dup.1 dup.1 ext2mul
        # => [(z_1, z_0)^n, i, ...]
        movup.2 add.1 dup.0 neq.0
        # => [b, i+1, (z_1, z_0)^n, ...]
    end # END while
    push.0 mem_storew.500000100 # z^8
    # => [0, 0, (z_1, z_0)^n, ...] where n = trace_len-8
    drop drop
    # Exponentiate z 8 times, until trace_len
    push.18446744069414584318
    # => [count, (z_1, z_0)^n, ...] where count=-3 , n=trace_len-3
    dup.0 neq.0
    while.true
        movdn.2 dup.1 dup.1 ext2mul
        # => [(z_1, z_0)^n, i, ...]
        movup.2 add.1 dup.0 neq.0
        # => [b, i+1, (z_1, z_0)^n, ...]
    end # END while
    push.0 mem_storew.500000101 # z^trace_len
    # => [0, 0, (z_1, z_0)^trace_len, ...]
    dropw # Clean stack
end # END PROC cache_z_exp

proc.cache_periodic_polys
    # periodic column 0
    padw mem_loadw.500000100 drop drop
    # => [z_exp_1, z_exp_0, ...]
    push.2305843008676823041 push.0
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.18446744069412487169 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.18446708885042495489 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.18446743931975630881 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.16140901060737761281 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.2097152 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.35184372088832 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.137438953440 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # Clean z_exp from the stack
    movup.3 movup.3 drop drop
    # => [a_1, a_0, ...]
    # Save the evaluation of the periodic polynomial at point z**exp, and clean stack
    push.0 push.0 mem_storew.500000000 dropw
end # END PROC cache_periodic_polys

proc.compute_evaluate_integrity_constraints
    # integrity constraint 0 for main
    padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop
    # push the accumulator to the stack
    push.1 movdn.2 push.0 movdn.2
    # => [b1, b0, r1, r0, ...]
    # square 1 times
    dup.1 dup.1 ext2mul
    # multiply
    dup.1 dup.1 movdn.5 movdn.5
    # => [b1, b0, r1, r0, b1, b0, ...] (4 cycles)
    ext2mul movdn.3 movdn.3
    # => [b1, b0, r1', r0', ...] (5 cycles)
    # clean stack
    drop drop
    # => [r1, r0, ...] (2 cycles)
    padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900200 movdn.3 movdn.3 drop drop ext2mul
    # integrity constraint 1 for main
    padw mem_loadw.500000000 drop drop padw mem_loadw.4294900000 drop drop padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop ext2sub ext2mul push.0 push.0 ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900200 drop drop ext2mul
    # integrity constraint 2 for main
    push.1 push.0 padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop ext2sub padw mem_loadw.4294900003 movdn.3 movdn.3 drop drop padw mem_loadw.4294900001 movdn.3 movdn.3 drop drop ext2sub padw mem_loadw.4294900002 movdn.3 movdn.3 drop drop ext2sub ext2mul push.2 push.0 push.3 push.0 ext2mul padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop ext2sub ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900201 movdn.3 movdn.3 drop drop ext2mul
    # integrity constraint 3 for main
    padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop padw mem_loadw.4294900003 movdn.3 movdn.3 drop drop padw mem_loadw.4294900001 movdn.3 movdn.3 drop drop padw mem_loadw.4294900002 movdn.3 movdn.3 drop drop ext2mul ext2sub ext2mul padw mem_loadw.4294900000 drop drop push.3 push.0 ext2sub push.4 push.0 push.2 push.0 ext2sub ext2sub ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900201 drop drop ext2mul
    # integrity constraint 0 for aux
    padw mem_loadw.4294900073 drop drop padw mem_loadw.4294900073 movdn.3 movdn.3 drop drop padw mem_loadw.4294900003 movdn.3 movdn.3 drop drop padw mem_loadw.4294900150 movdn.3 movdn.3 drop drop ext2add ext2mul ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900202 movdn.3 movdn.3 drop drop ext2mul
end # END PROC compute_evaluate_integrity_constraints

proc.compute_evaluate_boundary_constraints
    # boundary constraint 0 for main
    padw mem_loadw.4294900001 movdn.3 movdn.3 drop drop push.0 push.0 ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900202 drop drop ext2mul
    # boundary constraint 1 for main
    padw mem_loadw.4294900001 movdn.3 movdn.3 drop drop push.1 push.0 ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900203 movdn.3 movdn.3 drop drop ext2mul
end # END PROC compute_evaluate_boundary_constraints

proc.evaluate_integrity_constraints
    exec.cache_periodic_polys
    exec.compute_evaluate_integrity_constraints
    # Accumulate the numerator of the constraint polynomial
    ext2add ext2add ext2add ext2add ext2add
end # END PROC evaluate_integrity_constraints

proc.evaluate_boundary_constraints
    exec.compute_evaluate_boundary_constraints
    # Accumulate the numerator of the constraint polynomial
    ext2add ext2add
end # END PROC evaluate_boundary_constraints

