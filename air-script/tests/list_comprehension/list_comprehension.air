def ListComprehensionAir

trace_columns:
    main: [clk, fmp[2], ctx]
    aux: [a, b[3], c[4], d[4]]

public_inputs:
    stack_inputs: [16]

boundary_constraints:
    enf c[2].first = 0

integrity_constraints:
    let x = [fmp for fmp in fmp]
    enf clk = x[1]

    let enumerate = [2^i * c for (i, c) in (0..4, c)]
    enf a = clk * enumerate[3]
    
    let diff_ident_iterables = [x' - y' for (x, y) in (c, d)]
    enf a = clk * diff_ident_iterables[0]
    
    let diff_slice_iterables = [x - y for (x, y) in (c[0..2], d[1..3])]
    enf b[1] = clk * diff_slice_iterables[1]
    
    let x0 = [w + x - y - z for (w, x, y, z) in (0..3, b, c[0..3], d[0..3])]
    enf a = x0[0] + x0[1] + x0[2]
    
    let x1 = sum([c * d for (c, d) in (c, d)])
    let y1 = prod([c + d for (c, d) in (c, d)])    
    enf c[3] = x1 + y1
    
    let x2 = sum([c * d for (c, d) in (c, d)])
    let y2 = [m + x2 for m in fmp]
    enf a * clk = y2[0] + x2