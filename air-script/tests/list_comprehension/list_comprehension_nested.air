def ListComprehensionAir

const MDS = [
  [7, 23, 8, 26, 13, 10, 9, 7, 6, 22, 21, 8],
  [8, 7, 23, 8, 26, 13, 10, 9, 7, 6, 22, 21],
  [21, 8, 7, 23, 8, 26, 13, 10, 9, 7, 6, 22],
  [22, 21, 8, 7, 23, 8, 26, 13, 10, 9, 7, 6],
  [6, 22, 21, 8, 7, 23, 8, 26, 13, 10, 9, 7],
  [7, 6, 22, 21, 8, 7, 23, 8, 26, 13, 10, 9],
  [9, 7, 6, 22, 21, 8, 7, 23, 8, 26, 13, 10],
  [10, 9, 7, 6, 22, 21, 8, 7, 23, 8, 26, 13],
  [13, 10, 9, 7, 6, 22, 21, 8, 7, 23, 8, 26],
  [26, 13, 10, 9, 7, 6, 22, 21, 8, 7, 23, 8],
  [8, 26, 13, 10, 9, 7, 6, 22, 21, 8, 7, 23],
  [23, 8, 26, 13, 10, 9, 7, 6, 22, 21, 8, 7]
];

trace_columns {
    main: [clk],
}

public_inputs {
    input: [1],
}

boundary_constraints {
    enf clk.first = 0;
}

integrity_constraints {
    let state = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    let expected = [1026, 1090, 998, 894, 982, 1058, 1110, 1150, 1154, 1002, 1066, 950];
    enf apply_mds(state) = expected;
}

fn apply_mds(state: felt[12]) -> felt[12] {
    return [sum([s * m for (s, m) in (state, mds_row)]) for mds_row in MDS];
}

