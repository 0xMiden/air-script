proc.cache_z_exp
    padw mem_loadw.4294903304 drop drop
    # => [z_1, z_0, ...]
    # Exponentiate z trace_len times
    mem_load.4294903307 neg
    # => [count, z_1, z_0, ...] where count = -log2(trace_len)
    dup.0 neq.0
    while.true
        movdn.2 dup.1 dup.1 ext2mul
        # => [(z_1, z_0)^n, i, ...]
        movup.2 add.1 dup.0 neq.0
        # => [b, i+1, (z_1, z_0)^n, ...]
    end # END while
    push.0 mem_storew.500000100 # z^trace_len
    # => [0, 0, (z_1, z_0)^trace_len, ...]
    dropw # Clean stack
end # END PROC cache_z_exp

proc.compute_evaluate_integrity_constraints
    # integrity constraint 0 for main
    padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop padw mem_loadw.4294900002 movdn.3 movdn.3 drop drop ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900200 movdn.3 movdn.3 drop drop ext2mul
    # integrity constraint 0 for aux
    padw mem_loadw.4294900073 movdn.3 movdn.3 drop drop padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop push.8 push.0 padw mem_loadw.4294900080 movdn.3 movdn.3 drop drop ext2mul ext2mul ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900200 drop drop ext2mul
    # integrity constraint 1 for aux
    padw mem_loadw.4294900073 movdn.3 movdn.3 drop drop padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop padw mem_loadw.4294900077 drop drop padw mem_loadw.4294900081 drop drop ext2sub ext2mul ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900201 movdn.3 movdn.3 drop drop ext2mul
    # integrity constraint 2 for aux
    padw mem_loadw.4294900075 movdn.3 movdn.3 drop drop padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop padw mem_loadw.4294900078 movdn.3 movdn.3 drop drop padw mem_loadw.4294900083 movdn.3 movdn.3 drop drop ext2sub ext2mul ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900201 drop drop ext2mul
    # integrity constraint 3 for aux
    padw mem_loadw.4294900073 movdn.3 movdn.3 drop drop push.0 push.0 padw mem_loadw.4294900074 movdn.3 movdn.3 drop drop ext2add padw mem_loadw.4294900077 movdn.3 movdn.3 drop drop ext2sub padw mem_loadw.4294900081 movdn.3 movdn.3 drop drop ext2sub push.1 push.0 padw mem_loadw.4294900075 movdn.3 movdn.3 drop drop ext2add padw mem_loadw.4294900078 movdn.3 movdn.3 drop drop ext2sub padw mem_loadw.4294900082 movdn.3 movdn.3 drop drop ext2sub ext2add push.2 push.0 padw mem_loadw.4294900076 movdn.3 movdn.3 drop drop ext2add padw mem_loadw.4294900079 movdn.3 movdn.3 drop drop ext2sub padw mem_loadw.4294900083 movdn.3 movdn.3 drop drop ext2sub ext2add ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900202 movdn.3 movdn.3 drop drop ext2mul
end # END PROC compute_evaluate_integrity_constraints

proc.compute_evaluate_boundary_constraints
    # boundary constraint 0 for aux
    padw mem_loadw.4294900079 movdn.3 movdn.3 drop drop push.0 push.0 ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900202 drop drop ext2mul
end # END PROC compute_evaluate_boundary_constraints

proc.evaluate_integrity_constraints
    exec.compute_evaluate_integrity_constraints
    # Accumulate the numerator of the constraint polynomial
    ext2add ext2add ext2add ext2add ext2add
end # END PROC evaluate_integrity_constraints

proc.evaluate_boundary_constraints
    exec.compute_evaluate_boundary_constraints
    # Accumulate the numerator of the constraint polynomial
    ext2add
end # END PROC evaluate_boundary_constraints

