proc.cache_z_exp
    # Load trace length
    mem_load.4294903306
    # => [trace_len, ...]
    # Push initial num_of_cycles
    push.1
    # => [num_of_cycles, trace_len, ...]
    # Load Z
    padw mem_loadw.4294903304 drop drop
    # => [z_1, z_0, num_of_cycles, trace_len, ...]
    # Compute exponentiations based on the number of cycles for a period of 8
    dup.3 div.8
    # => [num_of_cycles', z_1, z_0, num_of_cycles, trace_len, ...]
    # Update next num_of_cycles and compute number of iterations
    movup.3 dup.1 movdn.4 div
    # => [i, z_1, z_0, num_of_cycles', trace_len, ...]
    # Exponentiate the existing `z**num_of_cycles` an additional `i` times
    dup.0 neq.1
    while.true
        movdn.2 dup.1 dup.1 ext2mul
        # => [z_1^2, z_0^2, i, num_of_cycles', trace_len, ...]
        movup.2 div.2 dup.0 neq.1
        # => [b, i+1, z_1^2, z_0^2, num_of_cycles', trace_len, ...]
    end # END while
    drop push.0 push.0 mem_storew.500000101 # Save the exponentiation of z for column 1
    # => [0, 0, z_1^2, z_0^2, num_of_cycles', trace_len, ...]
    drop drop
    # Compute exponentiations based on the number of cycles for a period of 4
    dup.3 div.4
    # => [num_of_cycles', z_1, z_0, num_of_cycles, trace_len, ...]
    # Update next num_of_cycles and compute number of iterations
    movup.3 dup.1 movdn.4 div
    # => [i, z_1, z_0, num_of_cycles', trace_len, ...]
    # Exponentiate the existing `z**num_of_cycles` an additional `i` times
    dup.0 neq.1
    while.true
        movdn.2 dup.1 dup.1 ext2mul
        # => [z_1^2, z_0^2, i, num_of_cycles', trace_len, ...]
        movup.2 div.2 dup.0 neq.1
        # => [b, i+1, z_1^2, z_0^2, num_of_cycles', trace_len, ...]
    end # END while
    drop push.0 push.0 mem_storew.500000100 # Save the exponentiation of z for column 0
    # => [0, 0, z_1^2, z_0^2, num_of_cycles', trace_len, ...]
    drop drop
    # => [z_1^2, z_0^2, num_of_cycles', trace_len, ...]
    # Clean stack
    dropw
end # END PROC cache_z_exp

proc.cache_periodic_polys
    exec.cache_z_exp
    # periodic column 0
    padw mem_loadw.500000100 drop drop
    # => [z_exp_1, z_exp_0, ...]
    push.13835058052060938241 push.0
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.13835058052060938241 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.13835058052060938241 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.13835058052060938241 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # Clean z_exp from the stack
    movup.3 movup.3 drop drop
    # => [a_1, a_0, ...]
    # Save the evaluation of the periodic polynomial at point z**exp, and clean stack
    push.0 push.0 mem_storew.500000000 dropw # periodic column 1
    padw mem_loadw.500000101 drop drop
    # => [z_exp_1, z_exp_0, ...]
    push.2305843008676823041 push.0
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.18446744069412487169 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.18446708885042495489 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.18446743931975630881 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.16140901060737761281 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.2097152 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.35184372088832 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # duplicate z_exp
    dup.3 dup.3
    # => [z_exp_1, z_exp_0, a_1, a_0, z_exp_1, z_exp_0, ...]
    ext2mul push.137438953440 push.0 ext2add
    # => [a_1, a_0, z_exp_1, z_exp_0, ...]
    # Clean z_exp from the stack
    movup.3 movup.3 drop drop
    # => [a_1, a_0, ...]
    # Save the evaluation of the periodic polynomial at point z**exp, and clean stack
    push.0 push.0 mem_storew.500000001 dropw
end # END PROC cache_periodic_polys

proc.compute_evaluate_integrity_constraints
    # integrity constraint 0 for main
    padw mem_loadw.500000000 drop drop padw mem_loadw.4294900001 movdn.3 movdn.3 drop drop padw mem_loadw.4294900002 movdn.3 movdn.3 drop drop ext2add ext2mul push.0 push.0 ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900200 movdn.3 movdn.3 drop drop ext2mul
    # integrity constraint 1 for main
    padw mem_loadw.500000001 drop drop padw mem_loadw.4294900000 drop drop padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop ext2sub ext2mul push.0 push.0 ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900200 drop drop ext2mul
end # END PROC compute_evaluate_integrity_constraints

proc.compute_evaluate_boundary_constraints
    # boundary constraint 0 for main
    padw mem_loadw.4294900000 movdn.3 movdn.3 drop drop push.0 push.0 ext2sub
    # Multiply by the composition coefficient
    padw mem_loadw.4294900201 movdn.3 movdn.3 drop drop ext2mul
end # END PROC compute_evaluate_boundary_constraints

proc.evaluate_integrity_constraints
    exec.cache_periodic_polys
    exec.compute_evaluate_integrity_constraints
    # Accumulate the numerator of the constraint polynomial
    ext2add ext2add
end # END PROC evaluate_integrity_constraints

proc.evaluate_boundary_constraints
    exec.compute_evaluate_boundary_constraints
    # Accumulate the numerator of the constraint polynomial
    ext2add
end # END PROC evaluate_boundary_constraints

